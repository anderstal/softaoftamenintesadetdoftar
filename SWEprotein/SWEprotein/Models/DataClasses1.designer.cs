#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SWEprotein.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="sweproteindb2")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttbActive(tbActive instance);
    partial void UpdatetbActive(tbActive instance);
    partial void DeletetbActive(tbActive instance);
    partial void InserttbCampaign(tbCampaign instance);
    partial void UpdatetbCampaign(tbCampaign instance);
    partial void DeletetbCampaign(tbCampaign instance);
    partial void InserttbOfferCode(tbOfferCode instance);
    partial void UpdatetbOfferCode(tbOfferCode instance);
    partial void DeletetbOfferCode(tbOfferCode instance);
    partial void InserttbOrder(tbOrder instance);
    partial void UpdatetbOrder(tbOrder instance);
    partial void DeletetbOrder(tbOrder instance);
    partial void InserttbProduct(tbProduct instance);
    partial void UpdatetbProduct(tbProduct instance);
    partial void DeletetbProduct(tbProduct instance);
    partial void InserttbProductCategory(tbProductCategory instance);
    partial void UpdatetbProductCategory(tbProductCategory instance);
    partial void DeletetbProductCategory(tbProductCategory instance);
    partial void InserttbProductOrder(tbProductOrder instance);
    partial void UpdatetbProductOrder(tbProductOrder instance);
    partial void DeletetbProductOrder(tbProductOrder instance);
    partial void InserttbProductType(tbProductType instance);
    partial void UpdatetbProductType(tbProductType instance);
    partial void DeletetbProductType(tbProductType instance);
    partial void InserttbStatus(tbStatus instance);
    partial void UpdatetbStatus(tbStatus instance);
    partial void DeletetbStatus(tbStatus instance);
    partial void InserttbTaste(tbTaste instance);
    partial void UpdatetbTaste(tbTaste instance);
    partial void DeletetbTaste(tbTaste instance);
    partial void InserttbUserInfo(tbUserInfo instance);
    partial void UpdatetbUserInfo(tbUserInfo instance);
    partial void DeletetbUserInfo(tbUserInfo instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["sweproteindb2ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tbActive> tbActives
		{
			get
			{
				return this.GetTable<tbActive>();
			}
		}
		
		public System.Data.Linq.Table<tbCampaign> tbCampaigns
		{
			get
			{
				return this.GetTable<tbCampaign>();
			}
		}
		
		public System.Data.Linq.Table<tbOfferCode> tbOfferCodes
		{
			get
			{
				return this.GetTable<tbOfferCode>();
			}
		}
		
		public System.Data.Linq.Table<tbOrder> tbOrders
		{
			get
			{
				return this.GetTable<tbOrder>();
			}
		}
		
		public System.Data.Linq.Table<tbProduct> tbProducts
		{
			get
			{
				return this.GetTable<tbProduct>();
			}
		}
		
		public System.Data.Linq.Table<tbProductCategory> tbProductCategories
		{
			get
			{
				return this.GetTable<tbProductCategory>();
			}
		}
		
		public System.Data.Linq.Table<tbProductOrder> tbProductOrders
		{
			get
			{
				return this.GetTable<tbProductOrder>();
			}
		}
		
		public System.Data.Linq.Table<tbProductType> tbProductTypes
		{
			get
			{
				return this.GetTable<tbProductType>();
			}
		}
		
		public System.Data.Linq.Table<tbStatus> tbStatus
		{
			get
			{
				return this.GetTable<tbStatus>();
			}
		}
		
		public System.Data.Linq.Table<tbTaste> tbTastes
		{
			get
			{
				return this.GetTable<tbTaste>();
			}
		}
		
		public System.Data.Linq.Table<tbUserInfo> tbUserInfos
		{
			get
			{
				return this.GetTable<tbUserInfo>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbActive")]
	public partial class tbActive : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _iID;
		
		private string _sName;
		
		private EntitySet<tbOfferCode> _tbOfferCodes;
		
		private EntitySet<tbProduct> _tbProducts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OniIDChanging(int value);
    partial void OniIDChanged();
    partial void OnsNameChanging(string value);
    partial void OnsNameChanged();
    #endregion
		
		public tbActive()
		{
			this._tbOfferCodes = new EntitySet<tbOfferCode>(new Action<tbOfferCode>(this.attach_tbOfferCodes), new Action<tbOfferCode>(this.detach_tbOfferCodes));
			this._tbProducts = new EntitySet<tbProduct>(new Action<tbProduct>(this.attach_tbProducts), new Action<tbProduct>(this.detach_tbProducts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int iID
		{
			get
			{
				return this._iID;
			}
			set
			{
				if ((this._iID != value))
				{
					this.OniIDChanging(value);
					this.SendPropertyChanging();
					this._iID = value;
					this.SendPropertyChanged("iID");
					this.OniIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string sName
		{
			get
			{
				return this._sName;
			}
			set
			{
				if ((this._sName != value))
				{
					this.OnsNameChanging(value);
					this.SendPropertyChanging();
					this._sName = value;
					this.SendPropertyChanged("sName");
					this.OnsNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbActive_tbOfferCode", Storage="_tbOfferCodes", ThisKey="iID", OtherKey="iActive")]
		public EntitySet<tbOfferCode> tbOfferCodes
		{
			get
			{
				return this._tbOfferCodes;
			}
			set
			{
				this._tbOfferCodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbActive_tbProduct", Storage="_tbProducts", ThisKey="iID", OtherKey="iActive")]
		public EntitySet<tbProduct> tbProducts
		{
			get
			{
				return this._tbProducts;
			}
			set
			{
				this._tbProducts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbOfferCodes(tbOfferCode entity)
		{
			this.SendPropertyChanging();
			entity.tbActive = this;
		}
		
		private void detach_tbOfferCodes(tbOfferCode entity)
		{
			this.SendPropertyChanging();
			entity.tbActive = null;
		}
		
		private void attach_tbProducts(tbProduct entity)
		{
			this.SendPropertyChanging();
			entity.tbActive = this;
		}
		
		private void detach_tbProducts(tbProduct entity)
		{
			this.SendPropertyChanging();
			entity.tbActive = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbCampaign")]
	public partial class tbCampaign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _iID;
		
		private string _sName;
		
		private string _sImgURL;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OniIDChanging(int value);
    partial void OniIDChanged();
    partial void OnsNameChanging(string value);
    partial void OnsNameChanged();
    partial void OnsImgURLChanging(string value);
    partial void OnsImgURLChanged();
    #endregion
		
		public tbCampaign()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int iID
		{
			get
			{
				return this._iID;
			}
			set
			{
				if ((this._iID != value))
				{
					this.OniIDChanging(value);
					this.SendPropertyChanging();
					this._iID = value;
					this.SendPropertyChanged("iID");
					this.OniIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string sName
		{
			get
			{
				return this._sName;
			}
			set
			{
				if ((this._sName != value))
				{
					this.OnsNameChanging(value);
					this.SendPropertyChanging();
					this._sName = value;
					this.SendPropertyChanged("sName");
					this.OnsNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sImgURL", DbType="NVarChar(50)")]
		public string sImgURL
		{
			get
			{
				return this._sImgURL;
			}
			set
			{
				if ((this._sImgURL != value))
				{
					this.OnsImgURLChanging(value);
					this.SendPropertyChanging();
					this._sImgURL = value;
					this.SendPropertyChanged("sImgURL");
					this.OnsImgURLChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbOfferCodes")]
	public partial class tbOfferCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _iID;
		
		private string _sStatus;
		
		private System.Nullable<int> _iActive;
		
		private EntityRef<tbActive> _tbActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OniIDChanging(int value);
    partial void OniIDChanged();
    partial void OnsStatusChanging(string value);
    partial void OnsStatusChanged();
    partial void OniActiveChanging(System.Nullable<int> value);
    partial void OniActiveChanged();
    #endregion
		
		public tbOfferCode()
		{
			this._tbActive = default(EntityRef<tbActive>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int iID
		{
			get
			{
				return this._iID;
			}
			set
			{
				if ((this._iID != value))
				{
					this.OniIDChanging(value);
					this.SendPropertyChanging();
					this._iID = value;
					this.SendPropertyChanged("iID");
					this.OniIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sStatus", DbType="NVarChar(40)")]
		public string sStatus
		{
			get
			{
				return this._sStatus;
			}
			set
			{
				if ((this._sStatus != value))
				{
					this.OnsStatusChanging(value);
					this.SendPropertyChanging();
					this._sStatus = value;
					this.SendPropertyChanged("sStatus");
					this.OnsStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iActive", DbType="Int")]
		public System.Nullable<int> iActive
		{
			get
			{
				return this._iActive;
			}
			set
			{
				if ((this._iActive != value))
				{
					if (this._tbActive.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OniActiveChanging(value);
					this.SendPropertyChanging();
					this._iActive = value;
					this.SendPropertyChanged("iActive");
					this.OniActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbActive_tbOfferCode", Storage="_tbActive", ThisKey="iActive", OtherKey="iID", IsForeignKey=true)]
		public tbActive tbActive
		{
			get
			{
				return this._tbActive.Entity;
			}
			set
			{
				tbActive previousValue = this._tbActive.Entity;
				if (((previousValue != value) 
							|| (this._tbActive.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbActive.Entity = null;
						previousValue.tbOfferCodes.Remove(this);
					}
					this._tbActive.Entity = value;
					if ((value != null))
					{
						value.tbOfferCodes.Add(this);
						this._iActive = value.iID;
					}
					else
					{
						this._iActive = default(Nullable<int>);
					}
					this.SendPropertyChanged("tbActive");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbOrder")]
	public partial class tbOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _iID;
		
		private int _iUserID;
		
		private int _iStatus;
		
		private System.Nullable<int> _iSum;
		
		private System.Nullable<System.DateTime> _dtOrderDate;
		
		private System.Nullable<int> _iGuestOrder;
		
		private EntitySet<tbProductOrder> _tbProductOrders;
		
		private EntityRef<tbStatus> _tbStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OniIDChanging(int value);
    partial void OniIDChanged();
    partial void OniUserIDChanging(int value);
    partial void OniUserIDChanged();
    partial void OniStatusChanging(int value);
    partial void OniStatusChanged();
    partial void OniSumChanging(System.Nullable<int> value);
    partial void OniSumChanged();
    partial void OndtOrderDateChanging(System.Nullable<System.DateTime> value);
    partial void OndtOrderDateChanged();
    partial void OniGuestOrderChanging(System.Nullable<int> value);
    partial void OniGuestOrderChanged();
    #endregion
		
		public tbOrder()
		{
			this._tbProductOrders = new EntitySet<tbProductOrder>(new Action<tbProductOrder>(this.attach_tbProductOrders), new Action<tbProductOrder>(this.detach_tbProductOrders));
			this._tbStatus = default(EntityRef<tbStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int iID
		{
			get
			{
				return this._iID;
			}
			set
			{
				if ((this._iID != value))
				{
					this.OniIDChanging(value);
					this.SendPropertyChanging();
					this._iID = value;
					this.SendPropertyChanged("iID");
					this.OniIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iUserID", DbType="Int NOT NULL")]
		public int iUserID
		{
			get
			{
				return this._iUserID;
			}
			set
			{
				if ((this._iUserID != value))
				{
					this.OniUserIDChanging(value);
					this.SendPropertyChanging();
					this._iUserID = value;
					this.SendPropertyChanged("iUserID");
					this.OniUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iStatus", DbType="Int NOT NULL")]
		public int iStatus
		{
			get
			{
				return this._iStatus;
			}
			set
			{
				if ((this._iStatus != value))
				{
					if (this._tbStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OniStatusChanging(value);
					this.SendPropertyChanging();
					this._iStatus = value;
					this.SendPropertyChanged("iStatus");
					this.OniStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iSum", DbType="Int")]
		public System.Nullable<int> iSum
		{
			get
			{
				return this._iSum;
			}
			set
			{
				if ((this._iSum != value))
				{
					this.OniSumChanging(value);
					this.SendPropertyChanging();
					this._iSum = value;
					this.SendPropertyChanged("iSum");
					this.OniSumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dtOrderDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> dtOrderDate
		{
			get
			{
				return this._dtOrderDate;
			}
			set
			{
				if ((this._dtOrderDate != value))
				{
					this.OndtOrderDateChanging(value);
					this.SendPropertyChanging();
					this._dtOrderDate = value;
					this.SendPropertyChanged("dtOrderDate");
					this.OndtOrderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iGuestOrder", DbType="Int")]
		public System.Nullable<int> iGuestOrder
		{
			get
			{
				return this._iGuestOrder;
			}
			set
			{
				if ((this._iGuestOrder != value))
				{
					this.OniGuestOrderChanging(value);
					this.SendPropertyChanging();
					this._iGuestOrder = value;
					this.SendPropertyChanged("iGuestOrder");
					this.OniGuestOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbOrder_tbProductOrder", Storage="_tbProductOrders", ThisKey="iID", OtherKey="iOrderID")]
		public EntitySet<tbProductOrder> tbProductOrders
		{
			get
			{
				return this._tbProductOrders;
			}
			set
			{
				this._tbProductOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbStatus_tbOrder", Storage="_tbStatus", ThisKey="iStatus", OtherKey="iID", IsForeignKey=true)]
		public tbStatus tbStatus
		{
			get
			{
				return this._tbStatus.Entity;
			}
			set
			{
				tbStatus previousValue = this._tbStatus.Entity;
				if (((previousValue != value) 
							|| (this._tbStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbStatus.Entity = null;
						previousValue.tbOrders.Remove(this);
					}
					this._tbStatus.Entity = value;
					if ((value != null))
					{
						value.tbOrders.Add(this);
						this._iStatus = value.iID;
					}
					else
					{
						this._iStatus = default(int);
					}
					this.SendPropertyChanged("tbStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbProductOrders(tbProductOrder entity)
		{
			this.SendPropertyChanging();
			entity.tbOrder = this;
		}
		
		private void detach_tbProductOrders(tbProductOrder entity)
		{
			this.SendPropertyChanging();
			entity.tbOrder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbProduct")]
	public partial class tbProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _iID;
		
		private System.Nullable<int> _iProductType;
		
		private string _sProductBrand;
		
		private string _sName;
		
		private System.Nullable<int> _iPrice;
		
		private string _sPicture;
		
		private string _sDescription;
		
		private System.Nullable<int> _iStockBalance;
		
		private System.Nullable<int> _iItemsSold;
		
		private System.Nullable<int> _iCount;
		
		private System.Nullable<int> _iTaste;
		
		private string _sMoreInfo;
		
		private System.Nullable<int> _iCampaign;
		
		private System.Nullable<int> _iProductCategory;
		
		private System.Nullable<int> _iPoints;
		
		private System.Nullable<int> _iActive;
		
		private EntitySet<tbProductOrder> _tbProductOrders;
		
		private EntityRef<tbActive> _tbActive;
		
		private EntityRef<tbProductType> _tbProductType;
		
		private EntityRef<tbTaste> _tbTaste;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OniIDChanging(int value);
    partial void OniIDChanged();
    partial void OniProductTypeChanging(System.Nullable<int> value);
    partial void OniProductTypeChanged();
    partial void OnsProductBrandChanging(string value);
    partial void OnsProductBrandChanged();
    partial void OnsNameChanging(string value);
    partial void OnsNameChanged();
    partial void OniPriceChanging(System.Nullable<int> value);
    partial void OniPriceChanged();
    partial void OnsPictureChanging(string value);
    partial void OnsPictureChanged();
    partial void OnsDescriptionChanging(string value);
    partial void OnsDescriptionChanged();
    partial void OniStockBalanceChanging(System.Nullable<int> value);
    partial void OniStockBalanceChanged();
    partial void OniItemsSoldChanging(System.Nullable<int> value);
    partial void OniItemsSoldChanged();
    partial void OniCountChanging(System.Nullable<int> value);
    partial void OniCountChanged();
    partial void OniTasteChanging(System.Nullable<int> value);
    partial void OniTasteChanged();
    partial void OnsMoreInfoChanging(string value);
    partial void OnsMoreInfoChanged();
    partial void OniCampaignChanging(System.Nullable<int> value);
    partial void OniCampaignChanged();
    partial void OniProductCategoryChanging(System.Nullable<int> value);
    partial void OniProductCategoryChanged();
    partial void OniPointsChanging(System.Nullable<int> value);
    partial void OniPointsChanged();
    partial void OniActiveChanging(System.Nullable<int> value);
    partial void OniActiveChanged();
    #endregion
		
		public tbProduct()
		{
			this._tbProductOrders = new EntitySet<tbProductOrder>(new Action<tbProductOrder>(this.attach_tbProductOrders), new Action<tbProductOrder>(this.detach_tbProductOrders));
			this._tbActive = default(EntityRef<tbActive>);
			this._tbProductType = default(EntityRef<tbProductType>);
			this._tbTaste = default(EntityRef<tbTaste>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int iID
		{
			get
			{
				return this._iID;
			}
			set
			{
				if ((this._iID != value))
				{
					this.OniIDChanging(value);
					this.SendPropertyChanging();
					this._iID = value;
					this.SendPropertyChanged("iID");
					this.OniIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iProductType", DbType="Int")]
		public System.Nullable<int> iProductType
		{
			get
			{
				return this._iProductType;
			}
			set
			{
				if ((this._iProductType != value))
				{
					if (this._tbProductType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OniProductTypeChanging(value);
					this.SendPropertyChanging();
					this._iProductType = value;
					this.SendPropertyChanged("iProductType");
					this.OniProductTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sProductBrand", DbType="NVarChar(50)")]
		public string sProductBrand
		{
			get
			{
				return this._sProductBrand;
			}
			set
			{
				if ((this._sProductBrand != value))
				{
					this.OnsProductBrandChanging(value);
					this.SendPropertyChanging();
					this._sProductBrand = value;
					this.SendPropertyChanged("sProductBrand");
					this.OnsProductBrandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sName", DbType="NVarChar(50)")]
		public string sName
		{
			get
			{
				return this._sName;
			}
			set
			{
				if ((this._sName != value))
				{
					this.OnsNameChanging(value);
					this.SendPropertyChanging();
					this._sName = value;
					this.SendPropertyChanged("sName");
					this.OnsNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iPrice", DbType="Int")]
		public System.Nullable<int> iPrice
		{
			get
			{
				return this._iPrice;
			}
			set
			{
				if ((this._iPrice != value))
				{
					this.OniPriceChanging(value);
					this.SendPropertyChanging();
					this._iPrice = value;
					this.SendPropertyChanged("iPrice");
					this.OniPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sPicture", DbType="NVarChar(200)")]
		public string sPicture
		{
			get
			{
				return this._sPicture;
			}
			set
			{
				if ((this._sPicture != value))
				{
					this.OnsPictureChanging(value);
					this.SendPropertyChanging();
					this._sPicture = value;
					this.SendPropertyChanged("sPicture");
					this.OnsPictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sDescription", DbType="NVarChar(500)")]
		public string sDescription
		{
			get
			{
				return this._sDescription;
			}
			set
			{
				if ((this._sDescription != value))
				{
					this.OnsDescriptionChanging(value);
					this.SendPropertyChanging();
					this._sDescription = value;
					this.SendPropertyChanged("sDescription");
					this.OnsDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iStockBalance", DbType="Int")]
		public System.Nullable<int> iStockBalance
		{
			get
			{
				return this._iStockBalance;
			}
			set
			{
				if ((this._iStockBalance != value))
				{
					this.OniStockBalanceChanging(value);
					this.SendPropertyChanging();
					this._iStockBalance = value;
					this.SendPropertyChanged("iStockBalance");
					this.OniStockBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iItemsSold", DbType="Int")]
		public System.Nullable<int> iItemsSold
		{
			get
			{
				return this._iItemsSold;
			}
			set
			{
				if ((this._iItemsSold != value))
				{
					this.OniItemsSoldChanging(value);
					this.SendPropertyChanging();
					this._iItemsSold = value;
					this.SendPropertyChanged("iItemsSold");
					this.OniItemsSoldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iCount", DbType="Int")]
		public System.Nullable<int> iCount
		{
			get
			{
				return this._iCount;
			}
			set
			{
				if ((this._iCount != value))
				{
					this.OniCountChanging(value);
					this.SendPropertyChanging();
					this._iCount = value;
					this.SendPropertyChanged("iCount");
					this.OniCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iTaste", DbType="Int")]
		public System.Nullable<int> iTaste
		{
			get
			{
				return this._iTaste;
			}
			set
			{
				if ((this._iTaste != value))
				{
					if (this._tbTaste.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OniTasteChanging(value);
					this.SendPropertyChanging();
					this._iTaste = value;
					this.SendPropertyChanged("iTaste");
					this.OniTasteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sMoreInfo", DbType="NVarChar(2000)")]
		public string sMoreInfo
		{
			get
			{
				return this._sMoreInfo;
			}
			set
			{
				if ((this._sMoreInfo != value))
				{
					this.OnsMoreInfoChanging(value);
					this.SendPropertyChanging();
					this._sMoreInfo = value;
					this.SendPropertyChanged("sMoreInfo");
					this.OnsMoreInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iCampaign", DbType="Int")]
		public System.Nullable<int> iCampaign
		{
			get
			{
				return this._iCampaign;
			}
			set
			{
				if ((this._iCampaign != value))
				{
					this.OniCampaignChanging(value);
					this.SendPropertyChanging();
					this._iCampaign = value;
					this.SendPropertyChanged("iCampaign");
					this.OniCampaignChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iProductCategory", DbType="Int")]
		public System.Nullable<int> iProductCategory
		{
			get
			{
				return this._iProductCategory;
			}
			set
			{
				if ((this._iProductCategory != value))
				{
					this.OniProductCategoryChanging(value);
					this.SendPropertyChanging();
					this._iProductCategory = value;
					this.SendPropertyChanged("iProductCategory");
					this.OniProductCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iPoints", DbType="Int")]
		public System.Nullable<int> iPoints
		{
			get
			{
				return this._iPoints;
			}
			set
			{
				if ((this._iPoints != value))
				{
					this.OniPointsChanging(value);
					this.SendPropertyChanging();
					this._iPoints = value;
					this.SendPropertyChanged("iPoints");
					this.OniPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iActive", DbType="Int")]
		public System.Nullable<int> iActive
		{
			get
			{
				return this._iActive;
			}
			set
			{
				if ((this._iActive != value))
				{
					if (this._tbActive.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OniActiveChanging(value);
					this.SendPropertyChanging();
					this._iActive = value;
					this.SendPropertyChanged("iActive");
					this.OniActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbProduct_tbProductOrder", Storage="_tbProductOrders", ThisKey="iID", OtherKey="iProductID")]
		public EntitySet<tbProductOrder> tbProductOrders
		{
			get
			{
				return this._tbProductOrders;
			}
			set
			{
				this._tbProductOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbActive_tbProduct", Storage="_tbActive", ThisKey="iActive", OtherKey="iID", IsForeignKey=true)]
		public tbActive tbActive
		{
			get
			{
				return this._tbActive.Entity;
			}
			set
			{
				tbActive previousValue = this._tbActive.Entity;
				if (((previousValue != value) 
							|| (this._tbActive.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbActive.Entity = null;
						previousValue.tbProducts.Remove(this);
					}
					this._tbActive.Entity = value;
					if ((value != null))
					{
						value.tbProducts.Add(this);
						this._iActive = value.iID;
					}
					else
					{
						this._iActive = default(Nullable<int>);
					}
					this.SendPropertyChanged("tbActive");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbProductType_tbProduct", Storage="_tbProductType", ThisKey="iProductType", OtherKey="iID", IsForeignKey=true)]
		public tbProductType tbProductType
		{
			get
			{
				return this._tbProductType.Entity;
			}
			set
			{
				tbProductType previousValue = this._tbProductType.Entity;
				if (((previousValue != value) 
							|| (this._tbProductType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbProductType.Entity = null;
						previousValue.tbProducts.Remove(this);
					}
					this._tbProductType.Entity = value;
					if ((value != null))
					{
						value.tbProducts.Add(this);
						this._iProductType = value.iID;
					}
					else
					{
						this._iProductType = default(Nullable<int>);
					}
					this.SendPropertyChanged("tbProductType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbTaste_tbProduct", Storage="_tbTaste", ThisKey="iTaste", OtherKey="iID", IsForeignKey=true)]
		public tbTaste tbTaste
		{
			get
			{
				return this._tbTaste.Entity;
			}
			set
			{
				tbTaste previousValue = this._tbTaste.Entity;
				if (((previousValue != value) 
							|| (this._tbTaste.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbTaste.Entity = null;
						previousValue.tbProducts.Remove(this);
					}
					this._tbTaste.Entity = value;
					if ((value != null))
					{
						value.tbProducts.Add(this);
						this._iTaste = value.iID;
					}
					else
					{
						this._iTaste = default(Nullable<int>);
					}
					this.SendPropertyChanged("tbTaste");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbProductOrders(tbProductOrder entity)
		{
			this.SendPropertyChanging();
			entity.tbProduct = this;
		}
		
		private void detach_tbProductOrders(tbProductOrder entity)
		{
			this.SendPropertyChanging();
			entity.tbProduct = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbProductCategory")]
	public partial class tbProductCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _iID;
		
		private string _sName;
		
		private EntitySet<tbProductType> _tbProductTypes;
		
		private EntitySet<tbProductType> _tbProductTypes1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OniIDChanging(int value);
    partial void OniIDChanged();
    partial void OnsNameChanging(string value);
    partial void OnsNameChanged();
    #endregion
		
		public tbProductCategory()
		{
			this._tbProductTypes = new EntitySet<tbProductType>(new Action<tbProductType>(this.attach_tbProductTypes), new Action<tbProductType>(this.detach_tbProductTypes));
			this._tbProductTypes1 = new EntitySet<tbProductType>(new Action<tbProductType>(this.attach_tbProductTypes1), new Action<tbProductType>(this.detach_tbProductTypes1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int iID
		{
			get
			{
				return this._iID;
			}
			set
			{
				if ((this._iID != value))
				{
					this.OniIDChanging(value);
					this.SendPropertyChanging();
					this._iID = value;
					this.SendPropertyChanged("iID");
					this.OniIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string sName
		{
			get
			{
				return this._sName;
			}
			set
			{
				if ((this._sName != value))
				{
					this.OnsNameChanging(value);
					this.SendPropertyChanging();
					this._sName = value;
					this.SendPropertyChanged("sName");
					this.OnsNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbProductCategory_tbProductType", Storage="_tbProductTypes", ThisKey="iID", OtherKey="iProductCategory")]
		public EntitySet<tbProductType> tbProductTypes
		{
			get
			{
				return this._tbProductTypes;
			}
			set
			{
				this._tbProductTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbProductCategory_tbProductType1", Storage="_tbProductTypes1", ThisKey="iID", OtherKey="iProductCategory")]
		public EntitySet<tbProductType> tbProductTypes1
		{
			get
			{
				return this._tbProductTypes1;
			}
			set
			{
				this._tbProductTypes1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbProductTypes(tbProductType entity)
		{
			this.SendPropertyChanging();
			entity.tbProductCategory = this;
		}
		
		private void detach_tbProductTypes(tbProductType entity)
		{
			this.SendPropertyChanging();
			entity.tbProductCategory = null;
		}
		
		private void attach_tbProductTypes1(tbProductType entity)
		{
			this.SendPropertyChanging();
			entity.tbProductCategory1 = this;
		}
		
		private void detach_tbProductTypes1(tbProductType entity)
		{
			this.SendPropertyChanging();
			entity.tbProductCategory1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbProductOrder")]
	public partial class tbProductOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _iID;
		
		private int _iOrderID;
		
		private int _iProductID;
		
		private int _iQuantity;
		
		private System.Nullable<int> _iPrice;
		
		private EntityRef<tbOrder> _tbOrder;
		
		private EntityRef<tbProduct> _tbProduct;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OniIDChanging(int value);
    partial void OniIDChanged();
    partial void OniOrderIDChanging(int value);
    partial void OniOrderIDChanged();
    partial void OniProductIDChanging(int value);
    partial void OniProductIDChanged();
    partial void OniQuantityChanging(int value);
    partial void OniQuantityChanged();
    partial void OniPriceChanging(System.Nullable<int> value);
    partial void OniPriceChanged();
    #endregion
		
		public tbProductOrder()
		{
			this._tbOrder = default(EntityRef<tbOrder>);
			this._tbProduct = default(EntityRef<tbProduct>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int iID
		{
			get
			{
				return this._iID;
			}
			set
			{
				if ((this._iID != value))
				{
					this.OniIDChanging(value);
					this.SendPropertyChanging();
					this._iID = value;
					this.SendPropertyChanged("iID");
					this.OniIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iOrderID", DbType="Int NOT NULL")]
		public int iOrderID
		{
			get
			{
				return this._iOrderID;
			}
			set
			{
				if ((this._iOrderID != value))
				{
					if (this._tbOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OniOrderIDChanging(value);
					this.SendPropertyChanging();
					this._iOrderID = value;
					this.SendPropertyChanged("iOrderID");
					this.OniOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iProductID", DbType="Int NOT NULL")]
		public int iProductID
		{
			get
			{
				return this._iProductID;
			}
			set
			{
				if ((this._iProductID != value))
				{
					if (this._tbProduct.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OniProductIDChanging(value);
					this.SendPropertyChanging();
					this._iProductID = value;
					this.SendPropertyChanged("iProductID");
					this.OniProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iQuantity", DbType="Int NOT NULL")]
		public int iQuantity
		{
			get
			{
				return this._iQuantity;
			}
			set
			{
				if ((this._iQuantity != value))
				{
					this.OniQuantityChanging(value);
					this.SendPropertyChanging();
					this._iQuantity = value;
					this.SendPropertyChanged("iQuantity");
					this.OniQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iPrice", DbType="Int")]
		public System.Nullable<int> iPrice
		{
			get
			{
				return this._iPrice;
			}
			set
			{
				if ((this._iPrice != value))
				{
					this.OniPriceChanging(value);
					this.SendPropertyChanging();
					this._iPrice = value;
					this.SendPropertyChanged("iPrice");
					this.OniPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbOrder_tbProductOrder", Storage="_tbOrder", ThisKey="iOrderID", OtherKey="iID", IsForeignKey=true)]
		public tbOrder tbOrder
		{
			get
			{
				return this._tbOrder.Entity;
			}
			set
			{
				tbOrder previousValue = this._tbOrder.Entity;
				if (((previousValue != value) 
							|| (this._tbOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbOrder.Entity = null;
						previousValue.tbProductOrders.Remove(this);
					}
					this._tbOrder.Entity = value;
					if ((value != null))
					{
						value.tbProductOrders.Add(this);
						this._iOrderID = value.iID;
					}
					else
					{
						this._iOrderID = default(int);
					}
					this.SendPropertyChanged("tbOrder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbProduct_tbProductOrder", Storage="_tbProduct", ThisKey="iProductID", OtherKey="iID", IsForeignKey=true)]
		public tbProduct tbProduct
		{
			get
			{
				return this._tbProduct.Entity;
			}
			set
			{
				tbProduct previousValue = this._tbProduct.Entity;
				if (((previousValue != value) 
							|| (this._tbProduct.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbProduct.Entity = null;
						previousValue.tbProductOrders.Remove(this);
					}
					this._tbProduct.Entity = value;
					if ((value != null))
					{
						value.tbProductOrders.Add(this);
						this._iProductID = value.iID;
					}
					else
					{
						this._iProductID = default(int);
					}
					this.SendPropertyChanged("tbProduct");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbProductType")]
	public partial class tbProductType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _iID;
		
		private string _sName;
		
		private System.Nullable<int> _iProductCategory;
		
		private EntitySet<tbProduct> _tbProducts;
		
		private EntityRef<tbProductCategory> _tbProductCategory;
		
		private EntityRef<tbProductCategory> _tbProductCategory1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OniIDChanging(int value);
    partial void OniIDChanged();
    partial void OnsNameChanging(string value);
    partial void OnsNameChanged();
    partial void OniProductCategoryChanging(System.Nullable<int> value);
    partial void OniProductCategoryChanged();
    #endregion
		
		public tbProductType()
		{
			this._tbProducts = new EntitySet<tbProduct>(new Action<tbProduct>(this.attach_tbProducts), new Action<tbProduct>(this.detach_tbProducts));
			this._tbProductCategory = default(EntityRef<tbProductCategory>);
			this._tbProductCategory1 = default(EntityRef<tbProductCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int iID
		{
			get
			{
				return this._iID;
			}
			set
			{
				if ((this._iID != value))
				{
					this.OniIDChanging(value);
					this.SendPropertyChanging();
					this._iID = value;
					this.SendPropertyChanged("iID");
					this.OniIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string sName
		{
			get
			{
				return this._sName;
			}
			set
			{
				if ((this._sName != value))
				{
					this.OnsNameChanging(value);
					this.SendPropertyChanging();
					this._sName = value;
					this.SendPropertyChanged("sName");
					this.OnsNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iProductCategory", DbType="Int")]
		public System.Nullable<int> iProductCategory
		{
			get
			{
				return this._iProductCategory;
			}
			set
			{
				if ((this._iProductCategory != value))
				{
					if ((this._tbProductCategory.HasLoadedOrAssignedValue || this._tbProductCategory1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OniProductCategoryChanging(value);
					this.SendPropertyChanging();
					this._iProductCategory = value;
					this.SendPropertyChanged("iProductCategory");
					this.OniProductCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbProductType_tbProduct", Storage="_tbProducts", ThisKey="iID", OtherKey="iProductType")]
		public EntitySet<tbProduct> tbProducts
		{
			get
			{
				return this._tbProducts;
			}
			set
			{
				this._tbProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbProductCategory_tbProductType", Storage="_tbProductCategory", ThisKey="iProductCategory", OtherKey="iID", IsForeignKey=true)]
		public tbProductCategory tbProductCategory
		{
			get
			{
				return this._tbProductCategory.Entity;
			}
			set
			{
				tbProductCategory previousValue = this._tbProductCategory.Entity;
				if (((previousValue != value) 
							|| (this._tbProductCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbProductCategory.Entity = null;
						previousValue.tbProductTypes.Remove(this);
					}
					this._tbProductCategory.Entity = value;
					if ((value != null))
					{
						value.tbProductTypes.Add(this);
						this._iProductCategory = value.iID;
					}
					else
					{
						this._iProductCategory = default(Nullable<int>);
					}
					this.SendPropertyChanged("tbProductCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbProductCategory_tbProductType1", Storage="_tbProductCategory1", ThisKey="iProductCategory", OtherKey="iID", IsForeignKey=true)]
		public tbProductCategory tbProductCategory1
		{
			get
			{
				return this._tbProductCategory1.Entity;
			}
			set
			{
				tbProductCategory previousValue = this._tbProductCategory1.Entity;
				if (((previousValue != value) 
							|| (this._tbProductCategory1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbProductCategory1.Entity = null;
						previousValue.tbProductTypes1.Remove(this);
					}
					this._tbProductCategory1.Entity = value;
					if ((value != null))
					{
						value.tbProductTypes1.Add(this);
						this._iProductCategory = value.iID;
					}
					else
					{
						this._iProductCategory = default(Nullable<int>);
					}
					this.SendPropertyChanged("tbProductCategory1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbProducts(tbProduct entity)
		{
			this.SendPropertyChanging();
			entity.tbProductType = this;
		}
		
		private void detach_tbProducts(tbProduct entity)
		{
			this.SendPropertyChanging();
			entity.tbProductType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbStatus")]
	public partial class tbStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _iID;
		
		private string _sStatus;
		
		private EntitySet<tbOrder> _tbOrders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OniIDChanging(int value);
    partial void OniIDChanged();
    partial void OnsStatusChanging(string value);
    partial void OnsStatusChanged();
    #endregion
		
		public tbStatus()
		{
			this._tbOrders = new EntitySet<tbOrder>(new Action<tbOrder>(this.attach_tbOrders), new Action<tbOrder>(this.detach_tbOrders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int iID
		{
			get
			{
				return this._iID;
			}
			set
			{
				if ((this._iID != value))
				{
					this.OniIDChanging(value);
					this.SendPropertyChanging();
					this._iID = value;
					this.SendPropertyChanged("iID");
					this.OniIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sStatus", DbType="NVarChar(40)")]
		public string sStatus
		{
			get
			{
				return this._sStatus;
			}
			set
			{
				if ((this._sStatus != value))
				{
					this.OnsStatusChanging(value);
					this.SendPropertyChanging();
					this._sStatus = value;
					this.SendPropertyChanged("sStatus");
					this.OnsStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbStatus_tbOrder", Storage="_tbOrders", ThisKey="iID", OtherKey="iStatus")]
		public EntitySet<tbOrder> tbOrders
		{
			get
			{
				return this._tbOrders;
			}
			set
			{
				this._tbOrders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbOrders(tbOrder entity)
		{
			this.SendPropertyChanging();
			entity.tbStatus = this;
		}
		
		private void detach_tbOrders(tbOrder entity)
		{
			this.SendPropertyChanging();
			entity.tbStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbTaste")]
	public partial class tbTaste : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _iID;
		
		private string _sTaste;
		
		private EntitySet<tbProduct> _tbProducts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OniIDChanging(int value);
    partial void OniIDChanged();
    partial void OnsTasteChanging(string value);
    partial void OnsTasteChanged();
    #endregion
		
		public tbTaste()
		{
			this._tbProducts = new EntitySet<tbProduct>(new Action<tbProduct>(this.attach_tbProducts), new Action<tbProduct>(this.detach_tbProducts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int iID
		{
			get
			{
				return this._iID;
			}
			set
			{
				if ((this._iID != value))
				{
					this.OniIDChanging(value);
					this.SendPropertyChanging();
					this._iID = value;
					this.SendPropertyChanged("iID");
					this.OniIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sTaste", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string sTaste
		{
			get
			{
				return this._sTaste;
			}
			set
			{
				if ((this._sTaste != value))
				{
					this.OnsTasteChanging(value);
					this.SendPropertyChanging();
					this._sTaste = value;
					this.SendPropertyChanged("sTaste");
					this.OnsTasteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbTaste_tbProduct", Storage="_tbProducts", ThisKey="iID", OtherKey="iTaste")]
		public EntitySet<tbProduct> tbProducts
		{
			get
			{
				return this._tbProducts;
			}
			set
			{
				this._tbProducts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbProducts(tbProduct entity)
		{
			this.SendPropertyChanging();
			entity.tbTaste = this;
		}
		
		private void detach_tbProducts(tbProduct entity)
		{
			this.SendPropertyChanging();
			entity.tbTaste = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbUserInfo")]
	public partial class tbUserInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _iID;
		
		private int _iUserID;
		
		private string _sFirstName;
		
		private string _sLastName;
		
		private string _sAdress;
		
		private string _sPostalNumber;
		
		private string _sCity;
		
		private string _sEmail;
		
		private string _sTelephone;
		
		private System.Nullable<int> _iTotalPurchase;
		
		private System.Nullable<int> _iNewsOffers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OniIDChanging(int value);
    partial void OniIDChanged();
    partial void OniUserIDChanging(int value);
    partial void OniUserIDChanged();
    partial void OnsFirstNameChanging(string value);
    partial void OnsFirstNameChanged();
    partial void OnsLastNameChanging(string value);
    partial void OnsLastNameChanged();
    partial void OnsAdressChanging(string value);
    partial void OnsAdressChanged();
    partial void OnsPostalNumberChanging(string value);
    partial void OnsPostalNumberChanged();
    partial void OnsCityChanging(string value);
    partial void OnsCityChanged();
    partial void OnsEmailChanging(string value);
    partial void OnsEmailChanged();
    partial void OnsTelephoneChanging(string value);
    partial void OnsTelephoneChanged();
    partial void OniTotalPurchaseChanging(System.Nullable<int> value);
    partial void OniTotalPurchaseChanged();
    partial void OniNewsOffersChanging(System.Nullable<int> value);
    partial void OniNewsOffersChanged();
    #endregion
		
		public tbUserInfo()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int iID
		{
			get
			{
				return this._iID;
			}
			set
			{
				if ((this._iID != value))
				{
					this.OniIDChanging(value);
					this.SendPropertyChanging();
					this._iID = value;
					this.SendPropertyChanged("iID");
					this.OniIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iUserID", DbType="Int NOT NULL")]
		public int iUserID
		{
			get
			{
				return this._iUserID;
			}
			set
			{
				if ((this._iUserID != value))
				{
					this.OniUserIDChanging(value);
					this.SendPropertyChanging();
					this._iUserID = value;
					this.SendPropertyChanged("iUserID");
					this.OniUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sFirstName", DbType="NVarChar(70)")]
		public string sFirstName
		{
			get
			{
				return this._sFirstName;
			}
			set
			{
				if ((this._sFirstName != value))
				{
					this.OnsFirstNameChanging(value);
					this.SendPropertyChanging();
					this._sFirstName = value;
					this.SendPropertyChanged("sFirstName");
					this.OnsFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sLastName", DbType="NVarChar(70)")]
		public string sLastName
		{
			get
			{
				return this._sLastName;
			}
			set
			{
				if ((this._sLastName != value))
				{
					this.OnsLastNameChanging(value);
					this.SendPropertyChanging();
					this._sLastName = value;
					this.SendPropertyChanged("sLastName");
					this.OnsLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sAdress", DbType="NVarChar(70)")]
		public string sAdress
		{
			get
			{
				return this._sAdress;
			}
			set
			{
				if ((this._sAdress != value))
				{
					this.OnsAdressChanging(value);
					this.SendPropertyChanging();
					this._sAdress = value;
					this.SendPropertyChanged("sAdress");
					this.OnsAdressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sPostalNumber", DbType="NVarChar(10)")]
		public string sPostalNumber
		{
			get
			{
				return this._sPostalNumber;
			}
			set
			{
				if ((this._sPostalNumber != value))
				{
					this.OnsPostalNumberChanging(value);
					this.SendPropertyChanging();
					this._sPostalNumber = value;
					this.SendPropertyChanged("sPostalNumber");
					this.OnsPostalNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sCity", DbType="NVarChar(50)")]
		public string sCity
		{
			get
			{
				return this._sCity;
			}
			set
			{
				if ((this._sCity != value))
				{
					this.OnsCityChanging(value);
					this.SendPropertyChanging();
					this._sCity = value;
					this.SendPropertyChanged("sCity");
					this.OnsCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sEmail", DbType="NVarChar(50)")]
		public string sEmail
		{
			get
			{
				return this._sEmail;
			}
			set
			{
				if ((this._sEmail != value))
				{
					this.OnsEmailChanging(value);
					this.SendPropertyChanging();
					this._sEmail = value;
					this.SendPropertyChanged("sEmail");
					this.OnsEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sTelephone", DbType="NVarChar(50)")]
		public string sTelephone
		{
			get
			{
				return this._sTelephone;
			}
			set
			{
				if ((this._sTelephone != value))
				{
					this.OnsTelephoneChanging(value);
					this.SendPropertyChanging();
					this._sTelephone = value;
					this.SendPropertyChanged("sTelephone");
					this.OnsTelephoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iTotalPurchase", DbType="Int")]
		public System.Nullable<int> iTotalPurchase
		{
			get
			{
				return this._iTotalPurchase;
			}
			set
			{
				if ((this._iTotalPurchase != value))
				{
					this.OniTotalPurchaseChanging(value);
					this.SendPropertyChanging();
					this._iTotalPurchase = value;
					this.SendPropertyChanged("iTotalPurchase");
					this.OniTotalPurchaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iNewsOffers", DbType="Int")]
		public System.Nullable<int> iNewsOffers
		{
			get
			{
				return this._iNewsOffers;
			}
			set
			{
				if ((this._iNewsOffers != value))
				{
					this.OniNewsOffersChanging(value);
					this.SendPropertyChanging();
					this._iNewsOffers = value;
					this.SendPropertyChanged("iNewsOffers");
					this.OniNewsOffersChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
